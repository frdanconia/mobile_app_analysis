)
g <- ggplot(cl.features, aes(x = pos_cluster_prop, fill = class)) +
geom_density(
size = 0.5,
adjust = 5,
color = "black",
alpha = 0.8
) +
scale_x_continuous(breaks = seq(0, 1, by = 0.25), limits = c(0, 1)) +
labs(x = "Positive class proportion inside each cluster", y = "KDE Estimates")
return(g)
g
g
g
g
g
g
g
g
g
g
g
col.scale <- colMaxs(abs(onehotmatrix))
x.sc <- sweep(onehotmatrix, 2, col.scale, "/")
clustering_df <- data.frame(onehotmatrix)
cl.model <- dbscan(x.sc, eps = 0.5, minPts = 128)
cl.features <-
data_frame(cluster = factor(cl.model$cluster, levels = sort(unique(
cl.model$cluster
))),
class = clustering_df$czy_samochod) %>%
mutate(
pos_class_prop = sum(class == 1) / n(),
neg_class_prop = sum(class == 0) / n()
) %>%
group_by(cluster) %>%
mutate(
pos_cluster_prop = sum(class == 1) / n() / pos_class_prop,
neg_cluster_prop = sum(class == 0) / n() / neg_class_prop
) %>%
ungroup() %>%
mutate(
pos_cluster_prop = pos_cluster_prop / (pos_cluster_prop + neg_cluster_prop),
neg_cluster_prop = neg_cluster_prop / (pos_cluster_prop + neg_cluster_prop)
)
g <- ggplot(cl.features, aes(x = pos_cluster_prop, fill = class)) +
geom_density(
size = 0.5,
adjust = 5,
color = "black",
alpha = 0.8
) +
scale_x_continuous(breaks = seq(0, 1, by = 0.25), limits = c(0, 1)) +
labs(x = "Positive class proportion inside each cluster", y = "KDE Estimates")
g
col.scale <- colMaxs(abs(onehotmatrix))
x.sc <- sweep(onehotmatrix, 2, col.scale, "/")
clustering_df <- data.frame(onehotmatrix)
cl.model <- dbscan(x.sc, eps = 0.5, minPts = 128)
cl.features <-
data_frame(cluster = factor(cl.model$cluster, levels = sort(unique(
cl.model$cluster
))),
class = !clustering_df$czy_samochod) %>%
mutate(
pos_class_prop = sum(class == 1) / n(),
neg_class_prop = sum(class == 0) / n()
) %>%
group_by(cluster) %>%
mutate(
pos_cluster_prop = sum(class == 1) / n() / pos_class_prop,
neg_cluster_prop = sum(class == 0) / n() / neg_class_prop
) %>%
ungroup() %>%
mutate(
pos_cluster_prop = pos_cluster_prop / (pos_cluster_prop + neg_cluster_prop),
neg_cluster_prop = neg_cluster_prop / (pos_cluster_prop + neg_cluster_prop)
)
g <- ggplot(cl.features, aes(x = pos_cluster_prop, fill = class)) +
geom_density(
size = 0.5,
adjust = 5,
color = "black",
alpha = 0.8
) +
scale_x_continuous(breaks = seq(0, 1, by = 0.25), limits = c(0, 1)) +
labs(x = "Positive class proportion inside each cluster", y = "KDE Estimates")
g
col.scale <- colMaxs(abs(onehotmatrix))
x.sc <- sweep(onehotmatrix, 2, col.scale, "/")
clustering_df <- data.frame(onehotmatrix)
cl.model <- dbscan(x.sc, eps = 0.5, minPts = 128)
cl.features <-
data_frame(cluster = factor(cl.model$cluster, levels = sort(unique(
cl.model$cluster
))),
class = !clustering_df$czy_mieszkanie) %>%
mutate(
pos_class_prop = sum(class == 1) / n(),
neg_class_prop = sum(class == 0) / n()
) %>%
group_by(cluster) %>%
mutate(
pos_cluster_prop = sum(class == 1) / n() / pos_class_prop,
neg_cluster_prop = sum(class == 0) / n() / neg_class_prop
) %>%
ungroup() %>%
mutate(
pos_cluster_prop = pos_cluster_prop / (pos_cluster_prop + neg_cluster_prop),
neg_cluster_prop = neg_cluster_prop / (pos_cluster_prop + neg_cluster_prop)
)
g <- ggplot(cl.features, aes(x = pos_cluster_prop, fill = class)) +
geom_density(
size = 0.5,
adjust = 5,
color = "black",
alpha = 0.8
) +
scale_x_continuous(breaks = seq(0, 1, by = 0.25), limits = c(0, 1)) +
labs(x = "Positive class proportion inside each cluster", y = "KDE Estimates")
g
col.scale <- colMaxs(abs(onehotmatrix))
x.sc <- sweep(onehotmatrix, 2, col.scale, "/")
clustering_df <- data.frame(onehotmatrix)
cl.model <- dbscan(x.sc, eps = 0.5, minPts = 128)
cl.features <-
data_frame(cluster = factor(cl.model$cluster, levels = sort(unique(
cl.model$cluster
))),
class = !clustering_df$plec) %>%
mutate(
pos_class_prop = sum(class == 1) / n(),
neg_class_prop = sum(class == 0) / n()
) %>%
group_by(cluster) %>%
mutate(
pos_cluster_prop = sum(class == 1) / n() / pos_class_prop,
neg_cluster_prop = sum(class == 0) / n() / neg_class_prop
) %>%
ungroup() %>%
mutate(
pos_cluster_prop = pos_cluster_prop / (pos_cluster_prop + neg_cluster_prop),
neg_cluster_prop = neg_cluster_prop / (pos_cluster_prop + neg_cluster_prop)
)
g <- ggplot(cl.features, aes(x = pos_cluster_prop, fill = class)) +
geom_density(
size = 0.5,
adjust = 5,
color = "black",
alpha = 0.8
) +
scale_x_continuous(breaks = seq(0, 1, by = 0.25), limits = c(0, 1)) +
labs(x = "Positive class proportion inside each cluster", y = "KDE Estimates")
g
!clustering_df$plec
!clustering_df$plec
sum(!clustering_df$plec)
sum(!clustering_df$plec)
sum(!clustering_df$plec)
sum(!clustering_df$plec)
sum(!clustering_df$plec)
sum(!clustering_df$plec)
as.true(clustering_df$plec)
!clustering_df$plec
!!clustering_df$plec
!!clustering_df$plec
PlotDbscanClustering <- function(onehotmatrix) {
col.scale <- colMaxs(abs(onehotmatrix))
x.sc <- sweep(onehotmatrix, 2, col.scale, "/")
clustering_df <- data.frame(onehotmatrix)
cl.model <- dbscan(x.sc, eps = 0.5, minPts = 128)
cl.features <-
data_frame(cluster = factor(cl.model$cluster, levels = sort(unique(
cl.model$cluster
))),
class = !!clustering_df$plec) %>%
mutate(
pos_class_prop = sum(class == 1) / n(),
neg_class_prop = sum(class == 0) / n()
) %>%
group_by(cluster) %>%
mutate(
pos_cluster_prop = sum(class == 1) / n() / pos_class_prop,
neg_cluster_prop = sum(class == 0) / n() / neg_class_prop
) %>%
ungroup() %>%
mutate(
pos_cluster_prop = pos_cluster_prop / (pos_cluster_prop + neg_cluster_prop),
neg_cluster_prop = neg_cluster_prop / (pos_cluster_prop + neg_cluster_prop)
)
g <- ggplot(cl.features, aes(x = pos_cluster_prop, fill = class)) +
geom_density(
size = 0.5,
adjust = 5,
color = "black",
alpha = 0.8
) +
scale_x_continuous(breaks = seq(0, 1, by = 0.25), limits = c(0, 1)) +
labs(x = "Positive class proportion inside each cluster", y = "KDE Estimates")
g
return(g)
}
cl.model <- dbscan(x.sc, eps = 0.5, minPts = 128)
cl.features <-
data_frame(cluster = factor(cl.model$cluster, levels = sort(unique(
cl.model$cluster
))),
class = !!clustering_df$plec) %>%
mutate(
pos_class_prop = sum(class == 1) / n(),
neg_class_prop = sum(class == 0) / n()
) %>%
group_by(cluster) %>%
mutate(
pos_cluster_prop = sum(class == 1) / n() / pos_class_prop,
neg_cluster_prop = sum(class == 0) / n() / neg_class_prop
) %>%
ungroup() %>%
mutate(
pos_cluster_prop = pos_cluster_prop / (pos_cluster_prop + neg_cluster_prop),
neg_cluster_prop = neg_cluster_prop / (pos_cluster_prop + neg_cluster_prop)
)
g <- ggplot(cl.features, aes(x = pos_cluster_prop, fill = class)) +
geom_density(
size = 0.5,
adjust = 5,
color = "black",
alpha = 0.8
) +
scale_x_continuous(breaks = seq(0, 1, by = 0.25), limits = c(0, 1)) +
labs(x = "Positive class proportion inside each cluster", y = "KDE Estimates")
g
col.scale <- colMaxs(abs(onehotmatrix))
x.sc <- sweep(onehotmatrix, 2, col.scale, "/")
clustering_df <- data.frame(onehotmatrix)
cl.model <- dbscan(x.sc, eps = 0.5, minPts = 128)
cl.features <-
data_frame(cluster = factor(cl.model$cluster, levels = sort(unique(
cl.model$cluster
))),
class = !clustering_df$plec) %>%
mutate(
pos_class_prop = sum(class == 1) / n(),
neg_class_prop = sum(class == 0) / n()
) %>%
group_by(cluster) %>%
mutate(
pos_cluster_prop = sum(class == 1) / n() / pos_class_prop,
neg_cluster_prop = sum(class == 0) / n() / neg_class_prop
) %>%
ungroup() %>%
mutate(
pos_cluster_prop = pos_cluster_prop / (pos_cluster_prop + neg_cluster_prop),
neg_cluster_prop = neg_cluster_prop / (pos_cluster_prop + neg_cluster_prop)
)
g <- ggplot(cl.features, aes(x = pos_cluster_prop, fill = class)) +
geom_density(
size = 0.5,
adjust = 5,
color = "black",
alpha = 0.8
) +
scale_x_continuous(breaks = seq(0, 1, by = 0.25), limits = c(0, 1)) +
labs(x = "Positive class proportion inside each cluster", y = "KDE Estimates")
g
PlotDbscanClustering <- function(onehotmatrix) {
col.scale <- colMaxs(abs(onehotmatrix))
x.sc <- sweep(onehotmatrix, 2, col.scale, "/")
clustering_df <- data.frame(onehotmatrix)
cl.model <- dbscan(x.sc, eps = 0.5, minPts = 128)
cl.features <-
data_frame(cluster = factor(cl.model$cluster, levels = sort(unique(
cl.model$cluster
))),
class = !clustering_df[['plec']]) %>%
mutate(
pos_class_prop = sum(class == 1) / n(),
neg_class_prop = sum(class == 0) / n()
) %>%
group_by(cluster) %>%
mutate(
pos_cluster_prop = sum(class == 1) / n() / pos_class_prop,
neg_cluster_prop = sum(class == 0) / n() / neg_class_prop
) %>%
ungroup() %>%
mutate(
pos_cluster_prop = pos_cluster_prop / (pos_cluster_prop + neg_cluster_prop),
neg_cluster_prop = neg_cluster_prop / (pos_cluster_prop + neg_cluster_prop)
)
g <- ggplot(cl.features, aes(x = pos_cluster_prop, fill = class)) +
geom_density(
size = 0.5,
adjust = 5,
color = "black",
alpha = 0.8
) +
scale_x_continuous(breaks = seq(0, 1, by = 0.25), limits = c(0, 1)) +
labs(x = "Positive class proportion inside each cluster", y = "KDE Estimates")
g
return(g)
}
PlotDbscanClustering <- function(onehotmatrix,col) {
col.scale <- colMaxs(abs(onehotmatrix))
x.sc <- sweep(onehotmatrix, 2, col.scale, "/")
clustering_df <- data.frame(onehotmatrix)
cl.model <- dbscan(x.sc, eps = 0.5, minPts = 128)
cl.features <-
data_frame(cluster = factor(cl.model$cluster, levels = sort(unique(
cl.model$cluster
))),
class = !clustering_df[[col]]) %>%
mutate(
pos_class_prop = sum(class == 1) / n(),
neg_class_prop = sum(class == 0) / n()
) %>%
group_by(cluster) %>%
mutate(
pos_cluster_prop = sum(class == 1) / n() / pos_class_prop,
neg_cluster_prop = sum(class == 0) / n() / neg_class_prop
) %>%
ungroup() %>%
mutate(
pos_cluster_prop = pos_cluster_prop / (pos_cluster_prop + neg_cluster_prop),
neg_cluster_prop = neg_cluster_prop / (pos_cluster_prop + neg_cluster_prop)
)
g <- ggplot(cl.features, aes(x = pos_cluster_prop, fill = class)) +
geom_density(
size = 0.5,
adjust = 5,
color = "black",
alpha = 0.8
) +
scale_x_continuous(breaks = seq(0, 1, by = 0.25), limits = c(0, 1)) +
labs(x = "Positive class proportion inside each cluster", y = "KDE Estimates")
g
return(g)
}
PlotDbscanClustering(onehotmatrix,'plec')
col.scale <- colMaxs(abs(onehotmatrix))
#7.	Jakie rodzaje segmentów użytkowników aplikacji posiadamy? Które segmenty częściej sięgają po usługę premium?
source("PlotDbscanClustering.R")
klienci_clustering <- klienci
klienci_clustering$first_day <- c()
onehotmatrix <- model.matrix(object = czy_kupil ~ . - 1, data = klienci_clustering)
klienci_clustering <- data.frame(onehotmatrix)
col.scale <- colMaxs(abs(onehotmatrix))
PlotDbscanClustering(onehotmatrix,'plec')
klienci_clustering <- klienci
klienci_clustering$first_day <- c()
onehotmatrix <- model.matrix(object = czy_kupil ~ . - 1, data = klienci_clustering)
PlotDbscanClustering(onehotmatrix,'plec')
PlotDbscanClustering(onehotmatrix,'czy_samochod')
PlotDbscanClustering(onehotmatrix,'czy_mieszkanie')
PlotDbscanClustering(onehotmatrix,'plec')
PlotDbscanClustering(onehotmatrix,'czy_samochod')
PlotDbscanClustering(onehotmatrix,'czy_mieszkanie')
c <- data.frame(onehotmatrix)
c$wyksztalceniewyzsze
PlotDbscanClustering(onehotmatrix,'wyksztalceniewyzsze')
PlotDbscanClustering(onehotmatrix,'plec')
klienci$plec
klienci$plec == 0
klienci$czy_kupil
klienci$czy_kupil[klienci$plec == 0]
table(klienci$czy_kupil[klienci$plec == 0])
table(klienci$czy_kupil[klienci$plec == 1])
PlotDbscanClustering(onehotmatrix,'plec')
table(klienci$czy_kupil[klienci$plec == 0])
table(klienci$czy_kupil[klienci$plec == 1])
PlotDbscanClustering(onehotmatrix,'czy_samochod')
PlotDbscanClustering(onehotmatrix,'plec')
table(klienci$czy_kupil[klienci$plec == 0])
table(klienci$czy_kupil[klienci$plec == 1])
PlotDbscanClustering(onehotmatrix,'czy_samochod')
table(klienci$czy_kupil[klienci$czy_samochod == 0])
table(klienci$czy_kupil[klienci$czy_samochod == 1])
PlotDbscanClustering(onehotmatrix,'czy_mieszkanie')
table(klienci$czy_kupil[klienci$czy_samochod == 1])
czy_samochod
czy_samochod
czy_samochod
PlotDbscanClustering(onehotmatrix,'plec')
PlotDbscanClustering(onehotmatrix,'wyksztalceniewyzsze')
PlotDbscanClustering(onehotmatrix,'czy_mieszkanie')
table(klienci$czy_kupil[klienci$czy_mieszkanie == 0])
PlotDbscanClustering(onehotmatrix,'czy_mieszkanie')
table(klienci$czy_kupil[klienci$czy_mieszkanie == 0])
table(klienci$czy_kupil[klienci$czy_mieszkanie == 1])
PlotDbscanClustering(onehotmatrix,'czy_samochod')
table(klienci$czy_kupil[klienci$czy_samochod == 0])
table(klienci$czy_kupil[klienci$czy_samochod == 1])
PlotDbscanClustering(onehotmatrix,'plec')
table(klienci$czy_kupil[klienci$plec == 0])
table(klienci$czy_kupil[klienci$plec == 1])
PlotDbscanClustering(onehotmatrix,'czy_mieszkanie')
#Model Dbscan sie bardzo mocno przetrenowywuje ze wzgl
PlotDbscanClustering(onehotmatrix,'plec')
table(klienci$czy_kupil[klienci$plec == 0])
table(klienci$czy_kupil[klienci$plec == 1])
#Kobiety relatywnie czesciej kupuja uslugi premium, segment plec ma znaczenie
PlotDbscanClustering(onehotmatrix,'czy_mieszkanie')
table(klienci$czy_kupil[klienci$czy_mieszkanie == 0])
table(klienci$czy_kupil[klienci$czy_mieszkanie == 1])
PlotDbscanClustering(onehotmatrix,'plec')
PlotDbscanClustering(onehotmatrix,'wyksztalceniewyzsze')
#8.	Czy klienci korzystają z aplikacji w jednym miejscu, czy może w większej liczbie miejsc? Jaki jest średni rozrzut odległości w wykorzystaniu aplikacji?
for (i in 1:length(klienci$klient_id)) {
klienci$nloc[i] <-
length(unique(session[session$klient_id == klienci$klient_id[i], ]$nuts3))
}
barplot(table(klienci$nloc))
table(klienci$nloc)
(392 + 35) / (3344 + 2229 + 392 + 35)
#8Wiekszosc klientow korzysta z aplikacji w 1 jednostce NUTS3, 50% mniej klientow korzysta z aplikacji w 2 jednostkach NUTS3. Zaledwie 7% klientow korzysta z aplikacji w 3 lub wiekszej ilosci jednostek administracyjnych.
#Model Dbscan sie bardzo mocno przetrenowywuje ze wzgledu na mala ilosc danych, zrobiony glownie pod wizualizacje
PlotDbscanClustering(onehotmatrix,'plec')
table(klienci$czy_kupil[klienci$plec == 0])
table(klienci$czy_kupil[klienci$plec == 1])
PlotDbscanClustering(onehotmatrix,'czy_mieszkanie')
table(klienci$czy_kupil[klienci$czy_mieszkanie == 0])
table(klienci$czy_kupil[klienci$czy_mieszkanie == 1])
#Model Dbscan sie bardzo mocno przetrenowywuje ze wzgledu na mala ilosc danych, zrobiony glownie pod wizualizacje
PlotDbscanClustering(onehotmatrix,'plec')
table(klienci$czy_kupil[klienci$plec == 0])
table(klienci$czy_kupil[klienci$plec == 1])
PlotDbscanClustering(onehotmatrix,'czy_mieszkanie')
table(klienci$czy_kupil[klienci$czy_mieszkanie == 0])
table(klienci$czy_kupil[klienci$czy_mieszkanie == 1])
PlotDbscanClustering(onehotmatrix,'wiek')
PlotDbscanClustering(onehotmatrix,'wyksztalceniewyzsze')
PlotDbscanClustering(onehotmatrix,'wyksztalceniesrednie')
PlotDbscanClustering(onehotmatrix,'wyksztalceniepodstawowe')
onehotdf <- data.frame(onehotmatrix)
onehotdf
onehotdf$wyksztalceniepodstawowe
table(onehotdf$wyksztalceniepodstawowe)
PlotDbscanClustering(onehotmatrix,'wyksztalceniewyzsze')
PlotDbscanClustering(onehotmatrix,'wyksztalceniesrednie')
PlotDbscanClustering(onehotmatrix,'wyksztalceniepodstawowe')
klienci_clustering <- klienci
klienci_clustering$first_day <- c()
onehotmatrix <- model.matrix(object = czy_kupil ~ . - 1, data = klienci_clustering)
#Model Dbscan sie bardzo mocno przetrenowywuje ze wzgledu na mala ilosc danych, zrobiony glownie pod wizualizacje
PlotDbscanClustering(onehotmatrix,'plec')
table(klienci$czy_kupil[klienci$plec == 0])
table(klienci$czy_kupil[klienci$plec == 1])
PlotDbscanClustering(onehotmatrix,'czy_mieszkanie')
table(klienci$czy_kupil[klienci$czy_mieszkanie == 0])
table(klienci$czy_kupil[klienci$czy_mieszkanie == 1])
for (i in 1:length(klienci$klient_id)) {
klienci$nloc[i] <-
length(unique(session[session$klient_id == klienci$klient_id[i], ]$nuts3))
}
table(klienci$czy_kupil[klienci$czy_samochod == 0])
table(klienci$czy_kupil[klienci$czy_samochod == 1])
PlotDbscanClustering(onehotmatrix,'czy_samochod')
table(klienci$czy_kupil)
quantile(klienci$wiek)
klienci$wiek
quantile(klienci$wiek)
quantile(klienci$wiek, na.rm = TRUE)
klienci$wiek < 47
quantile(klienci$wiek)
quantile(klienci$wiek)
quantile(klienci$wiek, na.rm = TRUE)
table(klienci$czy_kupil[klienci$wiek < 47])
table(klienci$czy_kupil[!klienci$wiek < 47])
quantile(klienci$wiek, na.rm = TRUE)
table(klienci$czy_kupil[klienci$wiek > 47 & klienci$wiek < 51])
table(klienci$czy_kupil[!klienci$wiek > 47 & klienci$wiek < 51])
table(klienci$czy_kupil[klienci$wiek < 47])
table(klienci$czy_kupil[!klienci$wiek < 47])
table(klienci$czy_kupil[klienci$wiek > 47 & klienci$wiek < 51])
table(klienci$czy_kupil[!klienci$wiek > 47 & klienci$wiek < 51])
quantile(klienci$wiek, na.rm = TRUE)
table(klienci$czy_kupil[klienci$wiek > 51 & klienci$wiek < 55])
table(klienci$czy_kupil[!klienci$wiek > 51 & klienci$wiek < 55])
table(klienci$czy_kupil[klienci$wiek > 55 & klienci$wiek < 73])
table(klienci$czy_kupil[!klienci$wiek > 55 & klienci$wiek < 73])
table(klienci$czy_kupil[klienci$wiek > 51 & klienci$wiek < 55])
table(klienci$czy_kupil[!klienci$wiek > 51 & klienci$wiek < 55])
table(klienci$czy_kupil[klienci$wiek > 47 & klienci$wiek < 51])
table(klienci$czy_kupil[!klienci$wiek > 47 & klienci$wiek < 51])
quantile(klienci$wiek, na.rm = TRUE)
table(klienci$czy_kupil[klienci$wiek < 47])
table(klienci$czy_kupil[!klienci$wiek < 47])
table(klienci$czy_kupil[klienci$wiek > 47 & klienci$wiek < 51])
table(klienci$czy_kupil[!klienci$wiek > 47 & klienci$wiek < 51])
table(klienci$czy_kupil[klienci$wiek > 51 & klienci$wiek < 55])
table(klienci$czy_kupil[!klienci$wiek > 51 & klienci$wiek < 55])
table(klienci$czy_kupil[klienci$wiek > 55 & klienci$wiek < 73])
table(klienci$czy_kupil[!klienci$wiek > 55 & klienci$wiek < 73])
for (i in 1:length(klienci$klient_id)) {
klienci$nloc[i] <-
length(unique(session[session$klient_id == klienci$klient_id[i], ]$nuts3))
}
library(foreach)
library(dplyr)
library(tidyr)
library(mice)
library(vroom)
library(lubridate)
library(tidyverse)
library(lmtest)
library(rgdal)
library(sp)
library(spdep)
library(rgeos)
library(RColorBrewer)
library(classInt)
library(dbscan)
source("PlotDbscanClustering.R")
