"% )",
"\n"
)
cat(
"Number of NaN:",
tmp.NaN <-
sum(!is.na(dataset[, i]) &
as.character(dataset[, i]) == "NaN"),
" (",
round(tmp.NaN.pct <-
tmp.NaN / length(dataset[, i]) * 100,
digits = 0),
"% )",
"\n"
)
cat(
"Number of Inf:",
tmp.Inf <-
sum(
!is.na(dataset[, i]) &
(dataset[, i] == -Inf | dataset[, i] == Inf)
),
" (",
round(tmp.Inf.pct <-
tmp.Inf / length(dataset[, i]) * 100,
digits = 0),
"% )",
"\n"
)
cat("Number of unique values / categories:",
tmp.unique <- length(unique(dataset[, i])),
"\n")
tbl.hlp <-
as.data.frame(table(dataset[, i], useNA = "ifany"))
rnms.hlp <-
as.character(tbl.hlp[, 1])
rnms.hlp[is.na(rnms.hlp)] <- "NA"
tbl.hlp <-
cbind(tbl.hlp[, 2], round(tbl.hlp[, 2] / sum(tbl.hlp[, 2]), digits = 2))
newordr.hlp <- order(tbl.hlp[, 1], decreasing =
TRUE)
if (length(newordr.hlp) > 1) {
tbl.hlp <-
data.frame(tbl.hlp[newordr.hlp,])
rnms.hlp <-
rnms.hlp[newordr.hlp]
}
tbl.hlp <-
cbind(tbl.hlp, cumsum(tbl.hlp[, 2]))
tbl.hlp <-
rbind(tbl.hlp, c(sum(tbl.hlp[, 1]), sum(tbl.hlp[, 2]), NA))
colnames(tbl.hlp) <-
c("Freq", "Prop", "Cum Prop")
row.names(tbl.hlp) <- c(rnms.hlp, "Sum")
cat("Dominant value:",
tmp.dominant.name <- rnms.hlp[1],
"\n")
cat(
"Number of dominant value:",
tmp.dominant <- tbl.hlp[1, 1],
" (",
round(
tmp.dominant.pct <-
tmp.dominant / length(dataset[, i]) * 100,
digits = 0
),
"% )",
"\n"
)
cat("Summary:", "\n")
print(tbl.hlp)
}
else {
cat("\n\t", i, "\n\n")
cat("Variable type / class:",
tmp.class <- var.class,
"\n")
cat(
"Number of NA:",
tmp.NA <- sum(is.na(dataset[, i])),
" (",
round(tmp.NA.pct <-
tmp.NA / length(dataset[, i]) * 100,
digits = 0),
"% )",
"\n"
)
cat(
"Number of NaN:",
tmp.NaN <-
sum(!is.na(dataset[, i]) &
as.character(dataset[, i]) == "NaN"),
" (",
round(tmp.NaN.pct <-
tmp.NaN / length(dataset[, i]) * 100,
digits = 0),
"% )",
"\n"
)
cat(
"Number of Inf:",
tmp.Inf <-
sum(
!is.na(dataset[, i]) &
(dataset[, i] == -Inf |
dataset[, i] == Inf)
),
" (",
round(tmp.Inf.pct <-
tmp.Inf / length(dataset[, i]) * 100,
digits = 0),
"% )",
"\n"
)
cat("Number of unique values / categories:",
tmp.unique <- length(unique(dataset[, i])),
"\n")
tbl.hlp <- as.data.frame(table(dataset[, i], useNA
= "ifany"))
rnms.hlp <- as.character(tbl.hlp[, 1])
rnms.hlp[is.na(rnms.hlp)] <- "NA"
tbl.hlp <-
cbind(tbl.hlp[, 2], round(tbl.hlp[, 2] / sum(tbl.hlp[, 2]), digits = 2))
newordr.hlp <- order(tbl.hlp[, 1], decreasing =
TRUE)
if (length(newordr.hlp) > 1) {
tbl.hlp <-
data.frame(tbl.hlp[newordr.hlp,])
rnms.hlp <- rnms.hlp[newordr.hlp]
}
tbl.hlp <- cbind(tbl.hlp, cumsum(tbl.hlp[, 2]))
tbl.hlp <-
rbind(tbl.hlp, c(sum(tbl.hlp[, 1]), sum(tbl.hlp[, 2]), NA))
colnames(tbl.hlp) <- c("Freq", "Prop", "Cum Prop")
row.names(tbl.hlp) <- c(rnms.hlp, "Sum")
cat("Dominant value:",
tmp.dominant.name <- rnms.hlp[1],
"\n")
cat(
"Number of dominant value:",
tmp.dominant <-
tbl.hlp[1 , 1],
" (",
round(
tmp.dominant.pct <-
tmp.dominant / length(dataset[, i]) * 100,
digits = 0
),
"% )",
"\n"
)
cat("Summary:",
"\n")
print(tbl.hlp)
cat("Variable is not of integer,
numeric nor factor
type",
"\n")
}
var.names.summary.df <-
rbind(
var.names.summary.df,
data.frame(
i,
tmp.class,
tmp.NA,
tmp.NA.pct,
tmp.NaN,
tmp.NaN.pct,
tmp.Inf,
tmp.Inf.pct,
tmp.unique,
tmp.dominant.name,
tmp.dominant,
tmp.dominant.pct
)
)
}
colnames(var.names.summary.df) <-
c(
"Variable.Name",
"Variable.Type",
"NA.num",
"NA.pct",
"NaN.num",
"NaN.pct",
"Inf.num",
"Inf.pct",
"Unique.Values.num",
"Dominant",
"Dominant.num",
"Dominant.pct"
)
return(var.names.summary.df)
}
VarSummary(data)
library(lubridate)
source("VarSummary.R")
data <- readRDS("klienci.RDS")
VarSummary(data)
warnings()
VarSummary(data)
VarSummary(data)
library(xgboost)
library(mice)
imputed_data <- mice(data, m=5, maxit = 50, method = 'pmm', seed = 500)
library(xgboost )
library(xgboost)
source("VarSummary.R")
data <- readRDS("klienci.RDS")
VarSummary(data)
dt <- complete(imputed_data,3)
dt$czy_kupil
onehotmatrix <- model.matrix(object = czy_kupil ~ . - 1, data = dt)
col.scale <- colMaxs(abs(onehotmatrix))
library(matrixStats)
source("VarSummary.R")
data <- readRDS("klienci.RDS")
VarSummary(data)
imputed_data <- mice(data, m=5, maxit = 50, method = 'pmm', seed = 500)
dt <- complete(imputed_data,3)
onehotmatrix <- model.matrix(object = czy_kupil ~ . - 1, data = dt)
col.scale <- colMaxs(abs(onehotmatrix))
x.sc <- sweep(onehotmatrix, 2, col.scale, "/")
dtrain <- xgb.DMatrix(Matrix(x.sc, sparse = TRUE),
label = as.integer(dt.fill$income) - 1)
xgb.params <- list(
"booster" = "gbtree",
"eta" = 0.05,
"max_depth" = 4,
"subsample" = 0.632,
"colsample_bytree" = 0.4,
"colsample_bylevel" = 0.6,
"min_child_weight" = 1,
"gamma" = 0,
"lambda" = 0,
"alpha" = 0,
"objective" = "binary:logistic",
"eval_metric" = "auc",
"silent" = 1,
"nthread" = 4,
"num_parallel_tree" = 5
)
set.seed(2020)
cv.out <-
xgb.cv(
params = xgb.params,
data = dtrain,
nrounds = 1.5e3,
metrics = list('error'),
nfold = 5,
prediction = FALSE,
verbose = TRUE,
showsd = FALSE,
print.every.n = 10,
early.stop.round = 10,
maximize = TRUE
)
#	Firma chce wdrożyć odpowiednią komunikację marketingową dla klientów, u których można stwierdzić szanse
# kupna produktu premium. Stwórz model klasyfikacyjny, którego celem jest przewidywanie którzy klienci mogą wykupić usługę premium. Jaka jest skuteczność takiego modelu? Jakie zmienne mają największy wpływ na decyzję o kupnie?
library(dplyr)
library(vroom)
library(lubridate)
library(xgboost)
library(mice)
library(xgboost)
library(matrixStats)
source("VarSummary.R")
data <- readRDS("klienci.RDS")
VarSummary(data)
imputed_data <- mice(data, m=5, maxit = 50, method = 'pmm', seed = 500)
dt <- complete(imputed_data,3)
onehotmatrix <- model.matrix(object = czy_kupil ~ . - 1, data = dt)
col.scale <- colMaxs(abs(onehotmatrix))
x.sc <- sweep(onehotmatrix, 2, col.scale, "/")
dtrain <- xgb.DMatrix(Matrix(x.sc, sparse = TRUE),
label = as.integer(dt.fill$income) - 1)
library(matrixStats)
dtrain <- xgb.DMatrix(Matrix(x.sc, sparse = TRUE),
label = as.integer(dt.fill$income) - 1)
library(Matrix)
dtrain <- xgb.DMatrix(Matrix(x.sc, sparse = TRUE),
label = as.integer(dt.fill$income) - 1)
dt$czy_kupil
dtrain <- xgb.DMatrix(Matrix(x.sc, sparse = TRUE),
label = as.integer(dt$czy_kupil) - 1)
dtrain <- xgb.DMatrix(Matrix(x.sc, sparse = TRUE),
label = as.integer(dt$czy_kupil))
dtrain <- xgb.DMatrix(Matrix(x.sc, sparse = TRUE),
label = as.integer(dt$czy_kupil - 1))
onehotmatrix <- model.matrix(object = czy_kupil ~ . - 1, data = dt)
col.scale <- colMaxs(abs(onehotmatrix))
x.sc <- sweep(onehotmatrix, 2, col.scale, "/")
x.sc
library(matrixStats)
library(Matrix)
source("VarSummary.R")
data <- readRDS("klienci.RDS")
VarSummary(data)
imputed_data <- mice(data, m=5, maxit = 50, method = 'pmm', seed = 500)
dt <- complete(imputed_data,3)
onehotmatrix <- model.matrix(object = czy_kupil ~ . - 1, data = dt)
col.scale <- colMaxs(abs(onehotmatrix))
x.sc <- sweep(onehotmatrix, 2, col.scale, "/")
dtrain <- xgb.DMatrix(Matrix(x.sc, sparse = TRUE),
label = as.integer(dt$czy_kupil - 1))
dtrain <- xgb.DMatrix(Matrix(x.sc, sparse = TRUE),
label = as.integer(dt$czy_kupil) - 1)
row.names(onehotmatrix)
length(row.names(onehotmatrix))
dt$czy_kupil
onehotmatrix <- model.matrix(object = czy_kupil ~ . - 1, data = dt)
length(row.names(onehotmatrix))
length(row.names(dt$czy_kupil))
length(row.names(dt))
onehotmatrix <- model.matrix(object = czy_kupil ~ ., data = dt)
length(row.names(onehotmatrix))
data.frame(onehotmatrix)
a <- data.frame(onehotmatrix)
row.names(a)
temp_df <- data.frame(onehotmatrix)
temp_df %>% left_join(dt)
temp <- temp_df %>% left_join(dt)
temp$czy_kupil
temp_df <- temp_df %>% left_join(dt)
length(row.names(temp$czy_kupil))
length(row.names(temp))
col.scale <- colMaxs(abs(onehotmatrix))
x.sc <- sweep(onehotmatrix, 2, col.scale, "/")
dtrain <- xgb.DMatrix(Matrix(x.sc, sparse = TRUE),
label = as.integer(temp$czy_kupil))
xgb.params <- list(
"booster" = "gbtree",
"eta" = 0.05,
"max_depth" = 4,
"subsample" = 0.632,
"colsample_bytree" = 0.4,
"colsample_bylevel" = 0.6,
"min_child_weight" = 1,
"gamma" = 0,
"lambda" = 0,
"alpha" = 0,
"objective" = "binary:logistic",
"eval_metric" = "auc",
"silent" = 1,
"nthread" = 4,
"num_parallel_tree" = 5
)
set.seed(2020)
cv.out <-
xgb.cv(
params = xgb.params,
data = dtrain,
nrounds = 1.5e3,
metrics = list('error'),
nfold = 5,
prediction = FALSE,
verbose = TRUE,
showsd = FALSE,
print.every.n = 10,
early.stop.round = 10,
maximize = TRUE
)
var.imp <- xgb.importance(colnames(all.x), model = xgb.model) %>%
mutate(Feature = gsub('[0-9]:', '', Feature)) %>%
group_by(Feature) %>%
summarise(Importance = quantile(Gain, 0.9)) %>%
ungroup() %>%
arrange(desc(Importance)) %>%
mutate(Importance = round(100 * Importance / sum(Importance), 2))
xgb.model <- xgb.train(data = dtrain,
params = xgb.params,
nrounds = 500)
set.seed(2020)
xgb.model <- xgb.train(data = dtrain,
params = xgb.params,
nrounds = 500)
xgb.model <- xgb.train(data = dtrain,
params = xgb.params,
nrounds = 500)
var.imp <- xgb.importance(colnames(x.sc), model = xgb.model) %>%
mutate(Feature = gsub('[0-9]+', '', Feature)) %>%
group_by(Feature) %>%
summarise(Importance = quantile(Gain, 0.9)) %>%
ungroup() %>%
arrange(desc(Importance)) %>%
mutate(Importance = round(100 * Importance / sum(Importance), 2))
var.im
var.im
var.imp
#Na decyzje o kupnie najwi
library(DALEX)
library(DALEXtra)
library(breakDown)
library(ROCit)
xgb.model
summary(xgb.model)
cv.out
xgb.model <- xgb.train(data = dtrain,
params = xgb.params,
nrounds = 500)
explainer<- explain_xgboost(xgb.model,
data = as.matrix(dtrain),  y = as.integer(temp$czy_kupil))
xgb.model
explainer<- explain_xgboost(xgb.model,
data = as.matrix(dtrain),  y = temp$czy_kupil)
explainer <- explain_xgboost(xgb.model,
data = as.matrix(dtrain),  y = temp$czy_kupil)
explainer <- explain_xgboost(xgb.model,
data = dtrain,  y = temp$czy_kupil)
dtrain[1,],
dtrain[1,]
dtrain[1,]
dtrain
dtrain\
dtrain
dtrain$
s
as.matrix(dtrain)
as.matrix(dtrain)
x.sc[1,]
x.sc[1,]
bd <- break_down(explainer,
x.sc[1,],
keep_distributions = TRUE)
dtrain
dtrain
dtrain.dtrain
dtrain
slice(DMatrix,as.integer(1))
slice(DMatrix,as.integer(1))
slice(dtrain,as.integer(1))
slice(dtrain,as.integer(1))
bd <- break_down(explainer,
slice(dtrain,as.integer(1)),
keep_distributions = TRUE)
bd <- break_down(explainer,
slice(dtrain,1),
keep_distributions = TRUE)
bd <- break_down(explainer,
slice(dtrain,as.integer(1)),
keep_distributions = TRUE)
bd <- break_down(explainer,
slice(dtrain,as.integer(1)))
lice(dtrain,as.integer(1)
s
slice(dtrain,as.integer(1))
slice(dtrain,as.integer(1))
slice(dtrain,as.integer(1))
as.matrix(slice(dtrain,as.integer(1)))
a <- slice(dtrain,as.integer(1))
bd <- break_down(explainer,
a)
slice(dtrain,as.integer(1)
d
slice(dtrain,as.integer(1))
slice(dtrain,as.integer(1))
bd <- break_down(explainer,
slice(dtrain,as.integer(1)))
bd <- break_down(explainer,
slice(dtrain,as.integer(40)))
install.packages("iBreakDown")
library(iBreakDown)
iBreakDown::break_down(explainer_paid, new_observation = obs )
iBreakDown::break_down(explainer, new_observation =  slice(dtrain,as.integer(2)))
Matrix(x.sc, sparse = TRUE)
Matrix(x.sc, sparse = TRUE)[1,]
Matrix(x.sc, sparse = TRUE)[40,]
bd <- break_down(explainer,
Matrix(x.sc, sparse = TRUE)[40,])
bd <- break_down(explainer,
xgb.DMatrix(Matrix(x.sc, sparse = TRUE)[40,]))
xgb.DMatrix(Matrix(x.sc, sparse = TRUE)[40,])
xgb.DMatrix(Matrix(x.sc, sparse = TRUE)[40,])
xgb.DMatrix(Matrix(x.sc, sparse = TRUE)[40])
xgb.DMatrix(Matrix(x.sc, sparse = TRUE))
xgb.DMatrix(Matrix(x.sc, sparse = TRUE))[1,]
slice(xgb.DMatrix(Matrix(x.sc, sparse = TRUE)),as.integer(2))
bd <- break_down(explainer,
slice(xgb.DMatrix(Matrix(x.sc, sparse = TRUE)),as.integer(2)))
?a
?slice
??slice
slice(dtrain)
slice(dtrain,1)
slice(dtrain,as.integer(1))
slice(dtrain,as.integer(1))
slice(dtrain,as.integer(1))
bd <- break_down(explainer,
slice(dtrain,as.integer(1)))
slice(dtrain,idxset=as.integer(1))
slice(dtrain,idxset=as.integer(1))
bd <- break_down(explainer,
slice(dtrain,idxset=as.integer(1)))
bd <- break_down(explainer,
bd <- break_down(explainer,
slice(dtrain,c(1)))
bd <- break_down(explainer,
slice(dtrain,c(as.integer(1))))
slice(dtrain,1:40)
bd <- break_down(explainer,
slice(dtrain,1:40))
summary(xgb.model)
suppressMessages(VarSummary(data))
suppressMessages(library(dplyr))
suppressMessages(library(vroom))
suppressMessages(library(lubridate))
suppressMessages(library(xgboost))
suppressMessages(library(mice))
suppressMessages(library(xgboost))
suppressMessages(library(matrixStats))
suppressMessages(library(Matrix))
